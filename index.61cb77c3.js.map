{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAY,SAAS,oBAAoB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAG/B,EAAM,GAAG,CAAC,SAAC,CAA1B,EACE,IAAM,EAAY,EAAM,IAAI,CACxB,EAAuB,GAEtB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAW,CAAA,CAAA,OAAA,QAAA,CAAA,GAAX,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAsB,CAAtB,IAAM,EAAN,EAAA,KAAA,CACC,IAAM,EAAE,WAAW,IACrB,CAAA,GAAwB,GAD1B,EAGA,GAAwB,CAC1B,C,C,M,E,CALK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOL,IAAM,EAAU,EAAM,EAAE,CAIlB,EAAW,SAAS,aAAa,CAAC,SAQxC,OANA,EAAS,SAAS,CAAC,GAAG,CAJH,eAMnB,EAAS,OAAO,CAAG,EACnB,EAAS,WAAW,CAAG,EACvB,EAAM,qBAAqB,CAAC,cAAe,GAEpC,CACT,GAMoB,EAAM,GAAG,CAAC,SAAC,CAA/B,EACE,IAAM,EAAkB,EAAM,IAAI,CAC9B,EAAyB,GAExB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAW,CAAA,CAAA,OAAA,QAAA,CAAA,GAAX,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA4B,CAA5B,IAAM,EAAN,EAAA,KAAA,CACC,IAAM,EAAE,WAAW,IACrB,CAAA,GAA0B,GAD5B,EAGA,GAA0B,CAC5B,C,C,M,E,CALK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOL,IAAM,EACJ,EAAuB,MAAM,CAAC,GAAG,WAAW,GAC5C,EAAuB,KAAK,CAAC,GAI/B,OAFA,EAAM,WAAW,CAAG,EAEb,CACT","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar input = _to_consumable_array(document.getElementsByTagName(\"input\"));\nfunction createLabelForInput() {\n    var labels = input.map(function(value) {\n        var labelName = value.name;\n        var labelNameToUpperCase = \"\";\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = labelName[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var l = _step.value;\n                if (l === l.toUpperCase()) labelNameToUpperCase += \" \";\n                labelNameToUpperCase += l;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var labelId = value.id;\n        var labelClass = \"field-label\";\n        var newLabel = document.createElement(\"label\");\n        newLabel.classList.add(labelClass);\n        newLabel.htmlFor = labelId;\n        newLabel.textContent = labelNameToUpperCase;\n        value.insertAdjacentElement(\"beforebegin\", newLabel);\n        return newLabel;\n    });\n    return labels;\n}\nfunction createPlaceholderForInput() {\n    var placeholder = input.map(function(value) {\n        var placeholderName = value.name;\n        var placeholderToUpperCase = \"\";\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = placeholderName[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var p = _step.value;\n                if (p === p.toUpperCase()) placeholderToUpperCase += \" \";\n                placeholderToUpperCase += p;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var placeholderUpdate = placeholderToUpperCase.charAt(0).toUpperCase() + placeholderToUpperCase.slice(1);\n        value.placeholder = placeholderUpdate;\n        return placeholderUpdate;\n    });\n    return placeholder;\n}\ncreateLabelForInput();\ncreatePlaceholderForInput();\n\n//# sourceMappingURL=index.61cb77c3.js.map\n","'use strict';\n\nconst input = [...document.getElementsByTagName('input')];\n\nfunction createLabelForInput() {\n  const labels = input.map((value) => {\n    const labelName = value.name;\n    let labelNameToUpperCase = '';\n\n    for (const l of labelName) {\n      if (l === l.toUpperCase()) {\n        labelNameToUpperCase += ' ';\n      }\n      labelNameToUpperCase += l;\n    }\n\n    const labelId = value.id;\n\n    const labelClass = 'field-label';\n\n    const newLabel = document.createElement('label');\n\n    newLabel.classList.add(labelClass);\n\n    newLabel.htmlFor = labelId;\n    newLabel.textContent = labelNameToUpperCase;\n    value.insertAdjacentElement('beforebegin', newLabel);\n\n    return newLabel;\n  });\n\n  return labels;\n}\n\nfunction createPlaceholderForInput() {\n  const placeholder = input.map((value) => {\n    const placeholderName = value.name;\n    let placeholderToUpperCase = '';\n\n    for (const p of placeholderName) {\n      if (p === p.toUpperCase()) {\n        placeholderToUpperCase += ' ';\n      }\n      placeholderToUpperCase += p;\n    }\n\n    const placeholderUpdate =\n      placeholderToUpperCase.charAt(0).toUpperCase() +\n      placeholderToUpperCase.slice(1);\n\n    value.placeholder = placeholderUpdate;\n\n    return placeholderUpdate;\n  });\n\n  return placeholder;\n}\n\ncreateLabelForInput();\ncreatePlaceholderForInput();\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","input","_array_without_holes","isArray","document","getElementsByTagName","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","value","labelName","labelNameToUpperCase","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","l","toUpperCase","err","return","labelId","id","newLabel","createElement","classList","add","htmlFor","textContent","insertAdjacentElement","placeholderName","placeholderToUpperCase","p","placeholderUpdate","charAt","placeholder"],"version":3,"file":"index.61cb77c3.js.map"}